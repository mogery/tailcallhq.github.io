"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[8637],{5429:(e,r,s)=>{s.r(r),s.d(r,{assets:()=>a,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>h,toc:()=>c});var t=s(5893),n=s(1151);const i={title:"@grpc"},o=void 0,h={id:"operators/grpc",title:"@grpc",description:"The @grpc operator is an essential GraphQL custom directive designed to interface with gRPC services. It allows GraphQL queries to directly invoke gRPC services, thereby bridging two powerful technologies. This directive is particularly useful when integrating GraphQL with microservices that expose gRPC endpoints.",source:"@site/docs/operators/grpc.md",sourceDirName:"operators",slug:"/operators/grpc",permalink:"/docs/operators/grpc",draft:!1,unlisted:!1,editUrl:"https://github.com/tailcallhq/tailcallhq.github.io/tree/develop/docs/operators/grpc.md",tags:[],version:"current",frontMatter:{title:"@grpc"},sidebar:"tutorialSidebar",previous:{title:"@graphQL",permalink:"/docs/operators/graphql"},next:{title:"@http",permalink:"/docs/operators/http"}},a={},c=[{value:"Using the <code>@grpc</code> Operator",id:"using-the-grpc-operator",level:3},{value:"Sample proto File",id:"sample-proto-file",level:3},{value:"service",id:"service",level:3},{value:"method",id:"method",level:3},{value:"protoPath",id:"protopath",level:3},{value:"baseURL",id:"baseurl",level:3},{value:"body",id:"body",level:3},{value:"headers",id:"headers",level:3},{value:"groupBy",id:"groupby",level:3}];function l(e){const r={code:"code",h3:"h3",p:"p",pre:"pre",strong:"strong",...(0,n.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(r.p,{children:["The ",(0,t.jsx)(r.strong,{children:"@grpc"})," operator is an essential GraphQL custom directive designed to interface with gRPC services. It allows GraphQL queries to directly invoke gRPC services, thereby bridging two powerful technologies. This directive is particularly useful when integrating GraphQL with microservices that expose gRPC endpoints."]}),"\n",(0,t.jsxs)(r.h3,{id:"using-the-grpc-operator",children:["Using the ",(0,t.jsx)(r.code,{children:"@grpc"})," Operator"]}),"\n",(0,t.jsxs)(r.p,{children:["The ",(0,t.jsx)(r.strong,{children:"@grpc"})," operator allows GraphQL fields to be resolved using gRPC services. Here's an example demonstrating its usage in a GraphQL schema:"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-graphql",metastring:"showLineNumbers",children:'type Query {\n  users: [User] @grpc(service: "UserService", method: "ListUsers", protoPath: "./proto/user_service.proto")\n}\n'})}),"\n",(0,t.jsxs)(r.p,{children:["In this example, when the ",(0,t.jsx)(r.code,{children:"users"})," field is queried, the GraphQL server will make a gRPC request to the ",(0,t.jsx)(r.code,{children:"ListUsers"})," method of the ",(0,t.jsx)(r.code,{children:"UserService"}),"."]}),"\n",(0,t.jsx)(r.h3,{id:"sample-proto-file",children:"Sample proto File"}),"\n",(0,t.jsxs)(r.p,{children:["The ",(0,t.jsx)(r.code,{children:".proto"})," file defines the structure of the gRPC service and its methods. Here is a simplified example:"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-proto",metastring:"showLineNumbers",children:'syntax = "proto3";\n\nservice UserService {\n  rpc ListUsers (UserListRequest) returns (UserListReply) {}\n  rpc GetUser (UserGetRequest) returns (UserGetReply) {}\n}\n\nmessage UserListRequest {\n  // Request parameters\n}\n\nmessage UserListReply {\n  // Reply structure\n}\n\nmessage UserGetRequest {\n  // Reply structure\n}\n\nmessage UserGetReply {\n  // Reply structure\n}\n'})}),"\n",(0,t.jsx)(r.h3,{id:"service",children:"service"}),"\n",(0,t.jsxs)(r.p,{children:["Indicates the gRPC service to be called. This should match the service name as defined in the ",(0,t.jsx)(r.code,{children:".proto"})," file."]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-graphql",metastring:"showLineNumbers",children:'type Query {\n  users: [User]\n    @grpc(\n      # highlight-start\n      service: "UserService"\n      # highlight-end\n      method: "ListUsers"\n      protoPath: "./proto/user_service.proto"\n    )\n}\n'})}),"\n",(0,t.jsx)(r.h3,{id:"method",children:"method"}),"\n",(0,t.jsxs)(r.p,{children:["Indicates the specific gRPC method to be invoked within the specified service. This should match the method name as defined in the ",(0,t.jsx)(r.code,{children:".proto"})," file."]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-graphql",metastring:"showLineNumbers",children:'type Query {\n  users: [User]\n    @grpc(\n      service: "UserService"\n      # highlight-start\n      method: "ListUsers"\n      # highlight-end\n      protoPath: "./proto/user_service.proto"\n    )\n}\n'})}),"\n",(0,t.jsx)(r.h3,{id:"protopath",children:"protoPath"}),"\n",(0,t.jsxs)(r.p,{children:["Path to the ",(0,t.jsx)(r.code,{children:".proto"})," file, containing service and method definitions for request/response encoding and decoding. The path can be relative or absolute. If the path is relative, it is resolved relative to the directory where the tailcall command is run from."]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-graphql",metastring:"showLineNumbers",children:'type Query {\n  users: [User]\n    @grpc(\n      service: "UserService"\n      method: "ListUsers"\n      # highlight-start\n      protoPath: "./proto/user_service.proto"\n      # highlight-end\n    )\n}\n'})}),"\n",(0,t.jsx)(r.h3,{id:"baseurl",children:"baseURL"}),"\n",(0,t.jsxs)(r.p,{children:["Indicates the base URL for the gRPC API. If omitted, the default URL defined in the ",(0,t.jsx)(r.code,{children:"@upstream"})," operator is used."]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-graphql",metastring:"showLineNumbers",children:'type Query {\n  users: [User]\n    @grpc(\n      service: "UserService"\n      method: "ListUsers"\n      protoPath: "./proto/user_service.proto"\n      # highlight-start\n      baseURL: "https://grpc-server.example.com"\n      # highlight-end\n    )\n}\n'})}),"\n",(0,t.jsx)(r.h3,{id:"body",children:"body"}),"\n",(0,t.jsxs)(r.p,{children:["Outlines the arguments for the gRPC call. The ",(0,t.jsx)(r.code,{children:"body"})," field is used to specify the arguments for the gRPC call. It can be static or dynamic. Here's an example:"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-graphql",metastring:"showLineNumbers",children:'type UserInput {\n  id: ID\n}\n\ntype Query {\n  user(id: UserInput!): User\n    @grpc(\n      service: "UserService"\n      method: "GetUser"\n      protoPath: "./proto/user_service.proto"\n      # highlight-start\n      body: "{{args.id}}"\n      # highlight-end\n    )\n}\n'})}),"\n",(0,t.jsx)(r.h3,{id:"headers",children:"headers"}),"\n",(0,t.jsxs)(r.p,{children:["Custom headers for the gRPC request can be specified using the ",(0,t.jsx)(r.code,{children:"headers"})," argument. This is particularly useful for passing authentication tokens or other contextual information."]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-graphql",metastring:"showLineNumbers",children:'type Query {\n  users: [User]\n    @grpc(\n      service: "UserService"\n      method: "ListUsers"\n      protoPath: "./proto/user_service.proto"\n      baseURL: "https://grpc-server.example.com"\n      # highlight-start\n      headers: [{key: "X-CUSTOM-HEADER", value: "custom-value"}]\n      # highlight-end\n    )\n}\n'})}),"\n",(0,t.jsx)(r.h3,{id:"groupby",children:"groupBy"}),"\n",(0,t.jsxs)(r.p,{children:["The ",(0,t.jsx)(r.code,{children:"groupBy"})," argument is used to optimize batch requests by grouping them based on specified response keys. This can significantly improve performance in scenarios with multiple, similar requests."]}),"\n",(0,t.jsxs)(r.p,{children:["For using the groupBy capability, the response type of the gRPC method should be a list of objects. For example, if the response type of the gRPC method is ",(0,t.jsx)(r.code,{children:"UserListReply"}),", then the ",(0,t.jsx)(r.code,{children:"groupBy"})," argument can be used as follows:"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-graphql",metastring:"showLineNumbers",children:'type Query {\n  users(id: UserInput!): User\n    @grpc(\n      service: "UserService"\n      method: "ListUsers"\n      protoPath: "./proto/user_service.proto"\n      baseURL: "https://grpc-server.example.com"\n      # highlight-start\n      groupBy: ["id"]\n      # highlight-end\n    )\n}\n'})}),"\n",(0,t.jsxs)(r.p,{children:["The ",(0,t.jsx)(r.strong,{children:"@grpc"})," operator is a powerful tool for GraphQL developers, allowing for seamless integration with gRPC services. By understanding and utilizing its various fields, developers can create efficient, streamlined APIs that leverage the strengths of both GraphQL and gRPC."]})]})}function d(e={}){const{wrapper:r}={...(0,n.a)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},1151:(e,r,s)=>{s.d(r,{Z:()=>h,a:()=>o});var t=s(7294);const n={},i=t.createContext(n);function o(e){const r=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function h(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:o(e.components),t.createElement(i.Provider,{value:r},e.children)}}}]);