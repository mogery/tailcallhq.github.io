"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[9852],{7670:(e,s,t)=>{t.r(s),t.d(s,{assets:()=>d,contentTitle:()=>i,default:()=>c,frontMatter:()=>a,metadata:()=>o,toc:()=>h});var r=t(5893),n=t(1151);const a={title:"@http"},i=void 0,o={id:"operators/http",title:"@http",description:"This @http operator serves as an indication of a field or node that is underpinned by a REST API. For Example:",source:"@site/docs/operators/http.md",sourceDirName:"operators",slug:"/operators/http",permalink:"/docs/operators/http",draft:!1,unlisted:!1,editUrl:"https://github.com/tailcallhq/tailcallhq.github.io/tree/develop/docs/operators/http.md",tags:[],version:"current",frontMatter:{title:"@http"},sidebar:"tutorialSidebar",previous:{title:"@grpc",permalink:"/docs/operators/grpc"},next:{title:"@modify",permalink:"/docs/operators/modify"}},d={},h=[{value:"baseURL",id:"baseurl",level:2},{value:"path",id:"path",level:2},{value:"method",id:"method",level:2},{value:"query",id:"query",level:2},{value:"body",id:"body",level:2},{value:"headers",id:"headers",level:2},{value:"groupBy",id:"groupby",level:2}];function l(e){const s={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,n.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(s.p,{children:["This ",(0,r.jsx)(s.strong,{children:"@http"})," operator serves as an indication of a field or node that is underpinned by a REST API. For Example:"]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-graphql",metastring:"showLineNumbers",children:'type Query {\n  users: [User] @http(path: "/users")\n}\n'})}),"\n",(0,r.jsxs)(s.p,{children:["In this example, the ",(0,r.jsx)(s.code,{children:"@http"})," operator is added to the ",(0,r.jsx)(s.code,{children:"users"})," field of the ",(0,r.jsx)(s.code,{children:"Query"})," type. This means that the ",(0,r.jsx)(s.code,{children:"users"})," field is underpinned by a REST API. The ",(0,r.jsx)(s.a,{href:"#path",children:"path"})," argument is used to specify the path of the REST API. In this case, the path is ",(0,r.jsx)(s.code,{children:"/users"}),". This means that the GraphQL server will make a GET request to ",(0,r.jsx)(s.code,{children:"https://jsonplaceholder.typicode.com/users"})," when the ",(0,r.jsx)(s.code,{children:"users"})," field is queried."]}),"\n",(0,r.jsx)(s.h2,{id:"baseurl",children:"baseURL"}),"\n",(0,r.jsxs)(s.p,{children:["This refers to the base URL of the API. If not specified, the default base URL is the one specified in the ",(0,r.jsx)(s.a,{href:"#upstream",children:"@upstream"})," operator."]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-graphql",metastring:"showLineNumbers",children:'type Query {\n  users: [User] @http(path: "/users", baseURL: "https://jsonplaceholder.typicode.com")\n}\n'})}),"\n",(0,r.jsx)(s.h2,{id:"path",children:"path"}),"\n",(0,r.jsxs)(s.p,{children:["This refers to the API endpoint you're going to call. For instance ",(0,r.jsx)(s.a,{href:"https://jsonplaceholder.typicode.com/users%60",children:"https://jsonplaceholder.typicode.com/users`"}),"."]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-graphql",metastring:"showLineNumbers",children:'type Query {\n  users: [User] @http(path: "/users")\n}\n'})}),"\n",(0,r.jsxs)(s.p,{children:["If your API endpoint contains dynamic segments, you can use Mustache templates to substitute variables. For example, to fetch a specific user, the path can be written as ",(0,r.jsx)(s.code,{children:"/users/{{args.id}}"}),"."]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-graphql",metastring:"showLineNumbers",children:'type Query {\n  user(id: ID!): User @http(path: "/users/{{args.id}}")\n}\n'})}),"\n",(0,r.jsx)(s.h2,{id:"method",children:"method"}),"\n",(0,r.jsx)(s.p,{children:"This refers to the HTTP method of the API call. Commonly used methods include GET, POST, PUT, DELETE, etc. If not specified, the default method is GET. For example:"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-graphql",metastring:"showLineNumbers",children:'type Mutation {\n  createUser(input: UserInput!): User @http(method: "POST", path: "/users")\n}\n'})}),"\n",(0,r.jsx)(s.h2,{id:"query",children:"query"}),"\n",(0,r.jsx)(s.p,{children:"This represents the query parameters of your API call. You can pass it as a static object or use Mustache template for dynamic parameters. These parameters will be added to the URL. For example:"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-graphql",metastring:"showLineNumbers",children:'type Query {\n  userPosts(id: ID!): [Post] @http(path: "/posts", query: [{key: "userId", value: "{{args.id}}"}])\n}\n'})}),"\n",(0,r.jsx)(s.h2,{id:"body",children:"body"}),"\n",(0,r.jsx)(s.p,{children:"The body of the API call. It's used for methods like POST or PUT that send data to the server. You can pass it as a static object or use a Mustache template to substitute variables from the GraphQL variables. For example:"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-graphql",metastring:"showLineNumbers",children:'type Mutation {\n  createUser(input: UserInput!): User @http(method: "POST", path: "/users", body: "{{args.input}}")\n}\n'})}),"\n",(0,r.jsxs)(s.p,{children:["In the example above, the ",(0,r.jsx)(s.code,{children:"createUser"})," mutation sends a POST request to ",(0,r.jsx)(s.code,{children:"/users"}),", with the input object converted to JSON and included in the request body."]}),"\n",(0,r.jsx)(s.h2,{id:"headers",children:"headers"}),"\n",(0,r.jsxs)(s.p,{children:["The ",(0,r.jsx)(s.code,{children:"headers"})," parameter allows you to customize the headers of the HTTP request made by the ",(0,r.jsx)(s.code,{children:"@http"})," operator. It is used by specifying a key-value map of header names and their values."]}),"\n",(0,r.jsx)(s.p,{children:"For instance:"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-graphql",metastring:"showLineNumbers",children:'type Mutation {\n  createUser(input: UserInput!): User @http(path: "/users", headers: [{key: "X-Server", value: "Tailcall"}])\n}\n'})}),"\n",(0,r.jsxs)(s.p,{children:["In this example, a request to ",(0,r.jsx)(s.code,{children:"/users"})," will include an additional HTTP header ",(0,r.jsx)(s.code,{children:"X-Server"})," with the value ",(0,r.jsx)(s.code,{children:"Tailcall"}),"."]}),"\n",(0,r.jsxs)(s.p,{children:["You can make use of mustache templates to provide dynamic values for headers, derived from the arguments or ",(0,r.jsx)(s.a,{href:"/docs/guides/context",children:"context"})," provided in the request. For example:"]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-graphql",metastring:"showLineNumbers",children:'type Mutation {\n  users(name: String): User\n    @http(path: "/users", headers: [{key: "X-Server", value: "Tailcall"}, {key: "User-Name", value: "{{args.name}}"}])\n}\n'})}),"\n",(0,r.jsxs)(s.p,{children:["In this scenario, the ",(0,r.jsx)(s.code,{children:"User-Name"})," header's value will dynamically adjust according to the ",(0,r.jsx)(s.code,{children:"name"})," argument passed in the request."]}),"\n",(0,r.jsx)(s.h2,{id:"groupby",children:"groupBy"}),"\n",(0,r.jsxs)(s.p,{children:["The ",(0,r.jsx)(s.code,{children:"groupBy"})," parameter groups multiple data requests into a single call. For more details please refer out ",(0,r.jsx)(s.a,{href:"/docs/guides/n+1#solving-using-batching",children:"n + 1 guide"}),"."]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-graphql",metastring:"showLineNumbers",children:'type Post {\n  id: Int!\n  name: String!\n  user: User @http(path: "/users", query: [{key: "id", value: "{{value.userId}}"}], groupBy: ["id"])\n}\n'})}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:'query: {key: "id", value: "{{value.userId}}"}]'}),": Here, TailCall CLI is instructed to generate a URL where the user id aligns with the ",(0,r.jsx)(s.code,{children:"userId"})," from the parent ",(0,r.jsx)(s.code,{children:"Post"}),". For a batch of posts, the CLI compiles a single URL, such as ",(0,r.jsx)(s.code,{children:"/users?id=1&id=2&id=3...id=10"}),", consolidating multiple requests into one."]}),"\n"]})]})}function c(e={}){const{wrapper:s}={...(0,n.a)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},1151:(e,s,t)=>{t.d(s,{Z:()=>o,a:()=>i});var r=t(7294);const n={},a=r.createContext(n);function i(e){const s=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function o(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:i(e.components),r.createElement(a.Provider,{value:s},e.children)}}}]);